Terminals unused in grammar

   STRING
   CHAR
   TYPE_INT
   TYPE_BOOLEAN
   TYPE_STRING
   TYPE_CHAR
   IF
   ELSE
   FOR
   WHILE
   CONST
   NEW
   OP_EXP
   LBRA
   RBRA
   LCUR
   RCUR
   SEMC
   COMA
   PDOT
   COLN
   QUES
   QTHM
   DQTHM


Grammar

    0 $accept: main $end

    1 main: expr_arithmetic
    2     | expr_boolean

    3 expr_arithmetic: expr_mul_or_div_or_mod
    4                | expr_arithmetic OP_PLUS expr_mul_or_div_or_mod
    5                | expr_arithmetic OP_MINUS expr_mul_or_div_or_mod

    6 expr_mul_or_div_or_mod: number
    7                       | expr_mul_or_div_or_mod OP_MULTIPLICATION number
    8                       | expr_mul_or_div_or_mod OP_DIVITION number
    9                       | expr_mul_or_div_or_mod OP_MODULO number

   10 number: u_number
   11       | neg_number
   12       | pos_number

   13 neg_number: OP_MINUS u_number

   14 pos_number: OP_PLUS u_number

   15 u_number: INT
   16         | LPAR expr_arithmetic RPAR

   17 expr_boolean: expr_or
   18             | expr_boolean OP_IMPLIES expr_or

   19 expr_or: expr_and
   20        | expr_or OP_OR expr_and

   21 expr_and: boolean
   22         | expr_and OP_AND boolean

   23 boolean: comparation
   24        | BOOLEAN
   25        | OP_NOT BOOLEAN
   26        | LPAR expr_boolean RPAR
   27        | OP_NOT LPAR expr_boolean RPAR

   28 comparation: expr_arithmetic OP_EQ expr_arithmetic
   29            | expr_arithmetic OP_NE expr_arithmetic
   30            | expr_arithmetic OP_GE expr_arithmetic
   31            | expr_arithmetic OP_LE expr_arithmetic
   32            | expr_arithmetic OP_GT expr_arithmetic
   33            | expr_arithmetic OP_LT expr_arithmetic


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 15
BOOLEAN (259) 24 25
STRING (260)
CHAR (261)
TYPE_INT (262)
TYPE_BOOLEAN (263)
TYPE_STRING (264)
TYPE_CHAR (265)
IF (266)
ELSE (267)
FOR (268)
WHILE (269)
CONST (270)
NEW (271)
OP_PLUS (272) 4 14
OP_MINUS (273) 5 13
OP_MULTIPLICATION (274) 7
OP_DIVITION (275) 8
OP_EXP (276)
OP_MODULO (277) 9
OP_EQ (278) 28
OP_NE (279) 29
OP_GE (280) 30
OP_LE (281) 31
OP_GT (282) 32
OP_LT (283) 33
OP_AND (284) 22
OP_OR (285) 20
OP_NOT (286) 25 27
OP_IMPLIES (287) 18
LPAR (288) 16 26 27
RPAR (289) 16 26 27
LBRA (290)
RBRA (291)
LCUR (292)
RCUR (293)
SEMC (294)
COMA (295)
PDOT (296)
COLN (297)
QUES (298)
QTHM (299)
DQTHM (300)


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
main (47)
    on left: 1 2, on right: 0
expr_arithmetic (48)
    on left: 3 4 5, on right: 1 4 5 16 28 29 30 31 32 33
expr_mul_or_div_or_mod (49)
    on left: 6 7 8 9, on right: 3 4 5 7 8 9
number (50)
    on left: 10 11 12, on right: 6 7 8 9
neg_number (51)
    on left: 13, on right: 11
pos_number (52)
    on left: 14, on right: 12
u_number (53)
    on left: 15 16, on right: 10 13 14
expr_boolean (54)
    on left: 17 18, on right: 2 18 26 27
expr_or (55)
    on left: 19 20, on right: 17 18 20
expr_and (56)
    on left: 21 22, on right: 19 20 22
boolean (57)
    on left: 23 24 25 26 27, on right: 21 22
comparation (58)
    on left: 28 29 30 31 32 33, on right: 23


state 0

    0 $accept: . main $end

    INT       shift, and go to state 1
    BOOLEAN   shift, and go to state 2
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    OP_NOT    shift, and go to state 5
    LPAR      shift, and go to state 6

    main                    go to state 7
    expr_arithmetic         go to state 8
    expr_mul_or_div_or_mod  go to state 9
    number                  go to state 10
    neg_number              go to state 11
    pos_number              go to state 12
    u_number                go to state 13
    expr_boolean            go to state 14
    expr_or                 go to state 15
    expr_and                go to state 16
    boolean                 go to state 17
    comparation             go to state 18


state 1

   15 u_number: INT .

    $default  reduce using rule 15 (u_number)


state 2

   24 boolean: BOOLEAN .

    $default  reduce using rule 24 (boolean)


state 3

   14 pos_number: OP_PLUS . u_number

    INT   shift, and go to state 1
    LPAR  shift, and go to state 19

    u_number  go to state 20


state 4

   13 neg_number: OP_MINUS . u_number

    INT   shift, and go to state 1
    LPAR  shift, and go to state 19

    u_number  go to state 21


state 5

   25 boolean: OP_NOT . BOOLEAN
   27        | OP_NOT . LPAR expr_boolean RPAR

    BOOLEAN  shift, and go to state 22
    LPAR     shift, and go to state 23


state 6

   16 u_number: LPAR . expr_arithmetic RPAR
   26 boolean: LPAR . expr_boolean RPAR

    INT       shift, and go to state 1
    BOOLEAN   shift, and go to state 2
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    OP_NOT    shift, and go to state 5
    LPAR      shift, and go to state 6

    expr_arithmetic         go to state 24
    expr_mul_or_div_or_mod  go to state 9
    number                  go to state 10
    neg_number              go to state 11
    pos_number              go to state 12
    u_number                go to state 13
    expr_boolean            go to state 25
    expr_or                 go to state 15
    expr_and                go to state 16
    boolean                 go to state 17
    comparation             go to state 18


state 7

    0 $accept: main . $end

    $end  shift, and go to state 26


state 8

    1 main: expr_arithmetic .
    4 expr_arithmetic: expr_arithmetic . OP_PLUS expr_mul_or_div_or_mod
    5                | expr_arithmetic . OP_MINUS expr_mul_or_div_or_mod
   28 comparation: expr_arithmetic . OP_EQ expr_arithmetic
   29            | expr_arithmetic . OP_NE expr_arithmetic
   30            | expr_arithmetic . OP_GE expr_arithmetic
   31            | expr_arithmetic . OP_LE expr_arithmetic
   32            | expr_arithmetic . OP_GT expr_arithmetic
   33            | expr_arithmetic . OP_LT expr_arithmetic

    OP_PLUS   shift, and go to state 27
    OP_MINUS  shift, and go to state 28
    OP_EQ     shift, and go to state 29
    OP_NE     shift, and go to state 30
    OP_GE     shift, and go to state 31
    OP_LE     shift, and go to state 32
    OP_GT     shift, and go to state 33
    OP_LT     shift, and go to state 34

    $default  reduce using rule 1 (main)


state 9

    3 expr_arithmetic: expr_mul_or_div_or_mod .
    7 expr_mul_or_div_or_mod: expr_mul_or_div_or_mod . OP_MULTIPLICATION number
    8                       | expr_mul_or_div_or_mod . OP_DIVITION number
    9                       | expr_mul_or_div_or_mod . OP_MODULO number

    OP_MULTIPLICATION  shift, and go to state 35
    OP_DIVITION        shift, and go to state 36
    OP_MODULO          shift, and go to state 37

    $default  reduce using rule 3 (expr_arithmetic)


state 10

    6 expr_mul_or_div_or_mod: number .

    $default  reduce using rule 6 (expr_mul_or_div_or_mod)


state 11

   11 number: neg_number .

    $default  reduce using rule 11 (number)


state 12

   12 number: pos_number .

    $default  reduce using rule 12 (number)


state 13

   10 number: u_number .

    $default  reduce using rule 10 (number)


state 14

    2 main: expr_boolean .
   18 expr_boolean: expr_boolean . OP_IMPLIES expr_or

    OP_IMPLIES  shift, and go to state 38

    $default  reduce using rule 2 (main)


state 15

   17 expr_boolean: expr_or .
   20 expr_or: expr_or . OP_OR expr_and

    OP_OR  shift, and go to state 39

    $default  reduce using rule 17 (expr_boolean)


state 16

   19 expr_or: expr_and .
   22 expr_and: expr_and . OP_AND boolean

    OP_AND  shift, and go to state 40

    $default  reduce using rule 19 (expr_or)


state 17

   21 expr_and: boolean .

    $default  reduce using rule 21 (expr_and)


state 18

   23 boolean: comparation .

    $default  reduce using rule 23 (boolean)


state 19

   16 u_number: LPAR . expr_arithmetic RPAR

    INT       shift, and go to state 1
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    LPAR      shift, and go to state 19

    expr_arithmetic         go to state 41
    expr_mul_or_div_or_mod  go to state 9
    number                  go to state 10
    neg_number              go to state 11
    pos_number              go to state 12
    u_number                go to state 13


state 20

   14 pos_number: OP_PLUS u_number .

    $default  reduce using rule 14 (pos_number)


state 21

   13 neg_number: OP_MINUS u_number .

    $default  reduce using rule 13 (neg_number)


state 22

   25 boolean: OP_NOT BOOLEAN .

    $default  reduce using rule 25 (boolean)


state 23

   27 boolean: OP_NOT LPAR . expr_boolean RPAR

    INT       shift, and go to state 1
    BOOLEAN   shift, and go to state 2
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    OP_NOT    shift, and go to state 5
    LPAR      shift, and go to state 6

    expr_arithmetic         go to state 42
    expr_mul_or_div_or_mod  go to state 9
    number                  go to state 10
    neg_number              go to state 11
    pos_number              go to state 12
    u_number                go to state 13
    expr_boolean            go to state 43
    expr_or                 go to state 15
    expr_and                go to state 16
    boolean                 go to state 17
    comparation             go to state 18


state 24

    4 expr_arithmetic: expr_arithmetic . OP_PLUS expr_mul_or_div_or_mod
    5                | expr_arithmetic . OP_MINUS expr_mul_or_div_or_mod
   16 u_number: LPAR expr_arithmetic . RPAR
   28 comparation: expr_arithmetic . OP_EQ expr_arithmetic
   29            | expr_arithmetic . OP_NE expr_arithmetic
   30            | expr_arithmetic . OP_GE expr_arithmetic
   31            | expr_arithmetic . OP_LE expr_arithmetic
   32            | expr_arithmetic . OP_GT expr_arithmetic
   33            | expr_arithmetic . OP_LT expr_arithmetic

    OP_PLUS   shift, and go to state 27
    OP_MINUS  shift, and go to state 28
    OP_EQ     shift, and go to state 29
    OP_NE     shift, and go to state 30
    OP_GE     shift, and go to state 31
    OP_LE     shift, and go to state 32
    OP_GT     shift, and go to state 33
    OP_LT     shift, and go to state 34
    RPAR      shift, and go to state 44


state 25

   18 expr_boolean: expr_boolean . OP_IMPLIES expr_or
   26 boolean: LPAR expr_boolean . RPAR

    OP_IMPLIES  shift, and go to state 38
    RPAR        shift, and go to state 45


state 26

    0 $accept: main $end .

    $default  accept


state 27

    4 expr_arithmetic: expr_arithmetic OP_PLUS . expr_mul_or_div_or_mod

    INT       shift, and go to state 1
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    LPAR      shift, and go to state 19

    expr_mul_or_div_or_mod  go to state 46
    number                  go to state 10
    neg_number              go to state 11
    pos_number              go to state 12
    u_number                go to state 13


state 28

    5 expr_arithmetic: expr_arithmetic OP_MINUS . expr_mul_or_div_or_mod

    INT       shift, and go to state 1
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    LPAR      shift, and go to state 19

    expr_mul_or_div_or_mod  go to state 47
    number                  go to state 10
    neg_number              go to state 11
    pos_number              go to state 12
    u_number                go to state 13


state 29

   28 comparation: expr_arithmetic OP_EQ . expr_arithmetic

    INT       shift, and go to state 1
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    LPAR      shift, and go to state 19

    expr_arithmetic         go to state 48
    expr_mul_or_div_or_mod  go to state 9
    number                  go to state 10
    neg_number              go to state 11
    pos_number              go to state 12
    u_number                go to state 13


state 30

   29 comparation: expr_arithmetic OP_NE . expr_arithmetic

    INT       shift, and go to state 1
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    LPAR      shift, and go to state 19

    expr_arithmetic         go to state 49
    expr_mul_or_div_or_mod  go to state 9
    number                  go to state 10
    neg_number              go to state 11
    pos_number              go to state 12
    u_number                go to state 13


state 31

   30 comparation: expr_arithmetic OP_GE . expr_arithmetic

    INT       shift, and go to state 1
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    LPAR      shift, and go to state 19

    expr_arithmetic         go to state 50
    expr_mul_or_div_or_mod  go to state 9
    number                  go to state 10
    neg_number              go to state 11
    pos_number              go to state 12
    u_number                go to state 13


state 32

   31 comparation: expr_arithmetic OP_LE . expr_arithmetic

    INT       shift, and go to state 1
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    LPAR      shift, and go to state 19

    expr_arithmetic         go to state 51
    expr_mul_or_div_or_mod  go to state 9
    number                  go to state 10
    neg_number              go to state 11
    pos_number              go to state 12
    u_number                go to state 13


state 33

   32 comparation: expr_arithmetic OP_GT . expr_arithmetic

    INT       shift, and go to state 1
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    LPAR      shift, and go to state 19

    expr_arithmetic         go to state 52
    expr_mul_or_div_or_mod  go to state 9
    number                  go to state 10
    neg_number              go to state 11
    pos_number              go to state 12
    u_number                go to state 13


state 34

   33 comparation: expr_arithmetic OP_LT . expr_arithmetic

    INT       shift, and go to state 1
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    LPAR      shift, and go to state 19

    expr_arithmetic         go to state 53
    expr_mul_or_div_or_mod  go to state 9
    number                  go to state 10
    neg_number              go to state 11
    pos_number              go to state 12
    u_number                go to state 13


state 35

    7 expr_mul_or_div_or_mod: expr_mul_or_div_or_mod OP_MULTIPLICATION . number

    INT       shift, and go to state 1
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    LPAR      shift, and go to state 19

    number      go to state 54
    neg_number  go to state 11
    pos_number  go to state 12
    u_number    go to state 13


state 36

    8 expr_mul_or_div_or_mod: expr_mul_or_div_or_mod OP_DIVITION . number

    INT       shift, and go to state 1
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    LPAR      shift, and go to state 19

    number      go to state 55
    neg_number  go to state 11
    pos_number  go to state 12
    u_number    go to state 13


state 37

    9 expr_mul_or_div_or_mod: expr_mul_or_div_or_mod OP_MODULO . number

    INT       shift, and go to state 1
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    LPAR      shift, and go to state 19

    number      go to state 56
    neg_number  go to state 11
    pos_number  go to state 12
    u_number    go to state 13


state 38

   18 expr_boolean: expr_boolean OP_IMPLIES . expr_or

    INT       shift, and go to state 1
    BOOLEAN   shift, and go to state 2
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    OP_NOT    shift, and go to state 5
    LPAR      shift, and go to state 6

    expr_arithmetic         go to state 42
    expr_mul_or_div_or_mod  go to state 9
    number                  go to state 10
    neg_number              go to state 11
    pos_number              go to state 12
    u_number                go to state 13
    expr_or                 go to state 57
    expr_and                go to state 16
    boolean                 go to state 17
    comparation             go to state 18


state 39

   20 expr_or: expr_or OP_OR . expr_and

    INT       shift, and go to state 1
    BOOLEAN   shift, and go to state 2
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    OP_NOT    shift, and go to state 5
    LPAR      shift, and go to state 6

    expr_arithmetic         go to state 42
    expr_mul_or_div_or_mod  go to state 9
    number                  go to state 10
    neg_number              go to state 11
    pos_number              go to state 12
    u_number                go to state 13
    expr_and                go to state 58
    boolean                 go to state 17
    comparation             go to state 18


state 40

   22 expr_and: expr_and OP_AND . boolean

    INT       shift, and go to state 1
    BOOLEAN   shift, and go to state 2
    OP_PLUS   shift, and go to state 3
    OP_MINUS  shift, and go to state 4
    OP_NOT    shift, and go to state 5
    LPAR      shift, and go to state 6

    expr_arithmetic         go to state 42
    expr_mul_or_div_or_mod  go to state 9
    number                  go to state 10
    neg_number              go to state 11
    pos_number              go to state 12
    u_number                go to state 13
    boolean                 go to state 59
    comparation             go to state 18


state 41

    4 expr_arithmetic: expr_arithmetic . OP_PLUS expr_mul_or_div_or_mod
    5                | expr_arithmetic . OP_MINUS expr_mul_or_div_or_mod
   16 u_number: LPAR expr_arithmetic . RPAR

    OP_PLUS   shift, and go to state 27
    OP_MINUS  shift, and go to state 28
    RPAR      shift, and go to state 44


state 42

    4 expr_arithmetic: expr_arithmetic . OP_PLUS expr_mul_or_div_or_mod
    5                | expr_arithmetic . OP_MINUS expr_mul_or_div_or_mod
   28 comparation: expr_arithmetic . OP_EQ expr_arithmetic
   29            | expr_arithmetic . OP_NE expr_arithmetic
   30            | expr_arithmetic . OP_GE expr_arithmetic
   31            | expr_arithmetic . OP_LE expr_arithmetic
   32            | expr_arithmetic . OP_GT expr_arithmetic
   33            | expr_arithmetic . OP_LT expr_arithmetic

    OP_PLUS   shift, and go to state 27
    OP_MINUS  shift, and go to state 28
    OP_EQ     shift, and go to state 29
    OP_NE     shift, and go to state 30
    OP_GE     shift, and go to state 31
    OP_LE     shift, and go to state 32
    OP_GT     shift, and go to state 33
    OP_LT     shift, and go to state 34


state 43

   18 expr_boolean: expr_boolean . OP_IMPLIES expr_or
   27 boolean: OP_NOT LPAR expr_boolean . RPAR

    OP_IMPLIES  shift, and go to state 38
    RPAR        shift, and go to state 60


state 44

   16 u_number: LPAR expr_arithmetic RPAR .

    $default  reduce using rule 16 (u_number)


state 45

   26 boolean: LPAR expr_boolean RPAR .

    $default  reduce using rule 26 (boolean)


state 46

    4 expr_arithmetic: expr_arithmetic OP_PLUS expr_mul_or_div_or_mod .
    7 expr_mul_or_div_or_mod: expr_mul_or_div_or_mod . OP_MULTIPLICATION number
    8                       | expr_mul_or_div_or_mod . OP_DIVITION number
    9                       | expr_mul_or_div_or_mod . OP_MODULO number

    OP_MULTIPLICATION  shift, and go to state 35
    OP_DIVITION        shift, and go to state 36
    OP_MODULO          shift, and go to state 37

    $default  reduce using rule 4 (expr_arithmetic)


state 47

    5 expr_arithmetic: expr_arithmetic OP_MINUS expr_mul_or_div_or_mod .
    7 expr_mul_or_div_or_mod: expr_mul_or_div_or_mod . OP_MULTIPLICATION number
    8                       | expr_mul_or_div_or_mod . OP_DIVITION number
    9                       | expr_mul_or_div_or_mod . OP_MODULO number

    OP_MULTIPLICATION  shift, and go to state 35
    OP_DIVITION        shift, and go to state 36
    OP_MODULO          shift, and go to state 37

    $default  reduce using rule 5 (expr_arithmetic)


state 48

    4 expr_arithmetic: expr_arithmetic . OP_PLUS expr_mul_or_div_or_mod
    5                | expr_arithmetic . OP_MINUS expr_mul_or_div_or_mod
   28 comparation: expr_arithmetic OP_EQ expr_arithmetic .

    OP_PLUS   shift, and go to state 27
    OP_MINUS  shift, and go to state 28

    $default  reduce using rule 28 (comparation)


state 49

    4 expr_arithmetic: expr_arithmetic . OP_PLUS expr_mul_or_div_or_mod
    5                | expr_arithmetic . OP_MINUS expr_mul_or_div_or_mod
   29 comparation: expr_arithmetic OP_NE expr_arithmetic .

    OP_PLUS   shift, and go to state 27
    OP_MINUS  shift, and go to state 28

    $default  reduce using rule 29 (comparation)


state 50

    4 expr_arithmetic: expr_arithmetic . OP_PLUS expr_mul_or_div_or_mod
    5                | expr_arithmetic . OP_MINUS expr_mul_or_div_or_mod
   30 comparation: expr_arithmetic OP_GE expr_arithmetic .

    OP_PLUS   shift, and go to state 27
    OP_MINUS  shift, and go to state 28

    $default  reduce using rule 30 (comparation)


state 51

    4 expr_arithmetic: expr_arithmetic . OP_PLUS expr_mul_or_div_or_mod
    5                | expr_arithmetic . OP_MINUS expr_mul_or_div_or_mod
   31 comparation: expr_arithmetic OP_LE expr_arithmetic .

    OP_PLUS   shift, and go to state 27
    OP_MINUS  shift, and go to state 28

    $default  reduce using rule 31 (comparation)


state 52

    4 expr_arithmetic: expr_arithmetic . OP_PLUS expr_mul_or_div_or_mod
    5                | expr_arithmetic . OP_MINUS expr_mul_or_div_or_mod
   32 comparation: expr_arithmetic OP_GT expr_arithmetic .

    OP_PLUS   shift, and go to state 27
    OP_MINUS  shift, and go to state 28

    $default  reduce using rule 32 (comparation)


state 53

    4 expr_arithmetic: expr_arithmetic . OP_PLUS expr_mul_or_div_or_mod
    5                | expr_arithmetic . OP_MINUS expr_mul_or_div_or_mod
   33 comparation: expr_arithmetic OP_LT expr_arithmetic .

    OP_PLUS   shift, and go to state 27
    OP_MINUS  shift, and go to state 28

    $default  reduce using rule 33 (comparation)


state 54

    7 expr_mul_or_div_or_mod: expr_mul_or_div_or_mod OP_MULTIPLICATION number .

    $default  reduce using rule 7 (expr_mul_or_div_or_mod)


state 55

    8 expr_mul_or_div_or_mod: expr_mul_or_div_or_mod OP_DIVITION number .

    $default  reduce using rule 8 (expr_mul_or_div_or_mod)


state 56

    9 expr_mul_or_div_or_mod: expr_mul_or_div_or_mod OP_MODULO number .

    $default  reduce using rule 9 (expr_mul_or_div_or_mod)


state 57

   18 expr_boolean: expr_boolean OP_IMPLIES expr_or .
   20 expr_or: expr_or . OP_OR expr_and

    OP_OR  shift, and go to state 39

    $default  reduce using rule 18 (expr_boolean)


state 58

   20 expr_or: expr_or OP_OR expr_and .
   22 expr_and: expr_and . OP_AND boolean

    OP_AND  shift, and go to state 40

    $default  reduce using rule 20 (expr_or)


state 59

   22 expr_and: expr_and OP_AND boolean .

    $default  reduce using rule 22 (expr_and)


state 60

   27 boolean: OP_NOT LPAR expr_boolean RPAR .

    $default  reduce using rule 27 (boolean)
